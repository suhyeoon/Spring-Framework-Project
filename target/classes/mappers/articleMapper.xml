<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="spring.web.mapper.ArticleMapper">

	<!-- 이곳에 접근하고자 하는 경우 namespace.id 로 접근한다. -->
	<!-- resultType은 자바의 타입과 매핑되는 것을 작성한다. 아래의 selectOne 은 spring.web.model.Member과 매핑 -->
	<!-- http://www.mybatis.org/mybatis-3/ko/configuration.html#typeAliases 참조 -->
	
	<!-- 공지사항 게시판 관련 쿼리 -->
	<insert id="noticeInsert">
		insert into NoticeBoard(writer,title,contents,uploaddate)
		values( #{writer} , #{title}, #{contents}, sysdate())
	</insert>
	
	<update id="noticeUpdate">
		update NoticeBoard
		set title = #{title}, contents = #{contents}
		where no = #{no}
	</update>
	
	<update id="noticeUpdateCount">
		update NoticeBoard
		set hits = #{hits} + 1
		where no = #{no}
	</update>
	
	<update id="noticeDelete">
		update NoticeBoard
		set visible = 0
		where no = #{no}
	</update>
	
	<select id="noticeSelectAll" resultType="spring.web.model.Article">
		select * 
		from NoticeBoard
		where visible = 1 
		order by no desc limit #{startRow},#{endRow}
	</select>
	
	<select id="noticeCountAll" resultType="String">
		select count(*) 
		from NoticeBoard
		where visible = 1
	</select>
	
	<select id="noticeSelect" resultType="spring.web.model.Article">
		select * 
		from NoticeBoard
		where no = #{no} 
	</select>
	
	<!--검색기능 쿼리문 -->
	<select id="search" resultType="spring.web.model.Article">
		select *
		from ${board}
		where visible = 1 and ${search} like #{keyword}
		order by no desc limit #{startRow},#{endRow}
	</select>
	
	<select id="searchCount" resultType="String">
		select count(*)
		from ${board}
		where visible = 1 and ${search} like #{keyword}
	</select>
	
	<select id="searchtitleContents" resultType="spring.web.model.Article">
		select *
		from ${board}
		where visible = 1 and (title like #{keyword} or contents like #{keyword})
		order by no desc limit #{startRow},#{endRow}
	</select>
	
	<select id="searchCounttitleContents" resultType="String">
		select count(*)
		from ${board}
		where visible = 1 and (title like #{keyword} or contents like #{keyword})
	</select>
	
	<!-- 이벤트 게시판 관련 쿼리 -->
	
	<!-- 진행중인 경우 테스트. -->
	<select id="eventOngoing" resultType="spring.web.model.Article">
	<!-- 꺽쇠 가 태그가 아닌 범위를 말하는 것임을 정의하기 위한 CDATA -->
	<![CDATA[
		select *
		from EventBoard
		where visible = 1 and (sysdate()>=startDate and sysdate() <= endDate)
		order by no desc limit #{startRow},#{endRow}
	]]>
	</select>
	<!-- 종료된 경우 테스트. -->
	<select id="eventEnd" resultType="spring.web.model.Article">
	<!-- 꺽쇠 가 태그가 아닌 범위를 말하는 것임을 정의하기 위한 CDATA -->
	<![CDATA[
		select *
		from EventBoard
		where visible = 1 and (sysdate() > endDate)
		order by no desc limit #{startRow},#{endRow}
	]]>
	</select>
	
	<insert id="eventInsert">
		insert into EventBoard
		values(null, #{writer} , #{title}, #{contents},0, #{image},
				#{startDate}, #{endDate}, sysdate(), true, 1)
	</insert>
	
	<!-- 진행중 리스트 카운트 -->
	<select id="eventCountOngoing" resultType="String">
		<![CDATA[
		select count(*)
		from EventBoard
		where visible = 1 and (sysdate()>=startDate and sysdate() <= endDate)
	]]>
	</select>
	<!-- 종료된 리스트 카운트 -->
	<select id="eventCountEnd" resultType="String">
		<![CDATA[
		select count(*)
		from EventBoard
		where visible = 1 and (sysdate() > endDate)
	]]>
	</select>
	
	<!-- <select id="eventCountAll" resultType="String">
		select count(*) 
		from EventBoard
		where visible = 1
	</select> -->
	
	<select id="eventSelectAll" resultType="spring.web.model.Article">
		select * 
		from EventBoard
		where visible = 1 
		order by no desc limit #{startRow},#{endRow}
	</select>
	
	<select id="eventSelect" resultType="spring.web.model.Article">
		select * 
		from EventBoard
		where no = #{no} 
	</select>
	
	<update id="eventUpdateCount">
		update EventBoard
		set hits = #{hits} + 1
		where no = #{no}
	</update>
	
	<update id="eventUpdate">
		update EventBoard
		set title = #{title}, contents = #{contents},
			startDate = #{startDate}, endDate = #{endDate}
		where no = #{no}
	</update>
	
	<update id="eventUpdateImage">
		update EventBoard
		set title = #{title}, contents = #{contents}, image = #{image},
			startDate = #{startDate}, endDate = #{endDate}
		where no = #{no}
	</update>
	
	<update id="eventDelete">
		update EventBoard
		set visible = 0
		where no = #{no}
	</update>
	
	<!-- Q&A 게시판 관련 쿼리 -->
	
	<insert id="qnaInsert">
		insert into QandABoard
		(category, writer, title, contents, uploadDate)
		values(#{category}, #{writer}, #{title}, #{contents}, sysdate())
	</insert>
	
	<insert id="qnaCommentInsert">
		insert into qandaComments
		(bNo, writer, contents, uploadDate)
		values(#{bNo}, #{writer}, #{contents}, sysdate())
	</insert>
	
	<select id="qnaCountAll" resultType="String">
		select count(*) 
		from QandABoard
		where visible = 1
	</select>
	
	<select id="qnaCommentCountAll" resultType="String">
		select count(*) 
		from qandaComments
		where visible = 1 and bNo = #{bNo}
	</select>
	
	<select id="qnaSelectAll" resultType="spring.web.model.Article">
		select * 
		from QandABoard
		where visible = 1 
		order by no desc limit #{startRow},#{endRow}
	</select>
	
	<select id="qnaCommentSelectAll" resultType="spring.web.model.Comment">
		select * 
		from qandaComments
		where visible = 1 and bNo = #{bNo}
		order by no desc limit #{startRow},#{endRow}
	</select>
	
	<select id="qnaSelect" resultType="spring.web.model.Article">
		select * 
		from QandABoard
		where no = #{no} 
	</select>
	
	<update id="qnaUpdate">
		update QandABoard
		set title = #{title}, contents = #{contents}
		where no = #{no}
	</update>
	
	<update id="qnaDelete">
		update QandABoard
		set visible = 0
		where no = #{no}
	</update>
	
	<update id="qnaCommentDelete">
		update QandAComments
		set visible = 0
		where no = #{no}
	</update>
	
	<!-- 건의사항 게시판 관련 쿼리 -->
	
	<insert id="suggestInsert">
		insert into suggestBoard
		(writer, title, contents, uploadDate)
		values(#{writer}, #{title}, #{contents}, sysdate())
	</insert>
	
	<insert id="suggestCommentInsert">
		insert into suggestComments
		(bNo, writer, contents, uploadDate)
		values(#{bNo}, #{writer}, #{contents}, sysdate())
	</insert>
	
	<select id="suggestCountAll" resultType="String">
		select count(*) 
		from suggestBoard
		where visible = 1
	</select>
	
	<select id="suggestCommentCountAll" resultType="String">
		select count(*) 
		from suggestComments
		where visible = 1 and bNo = #{bNo}
	</select>
	
	<select id="suggestSelectAll" resultType="spring.web.model.Article">
		select * 
		from suggestBoard
		where visible = 1 
		order by no desc limit #{startRow},#{endRow}
	</select>
	
	<select id="suggestCommentSelectAll" resultType="spring.web.model.Comment">
		select * 
		from suggestComments
		where visible = 1 and bNo = #{bNo}
		order by no desc limit #{startRow},#{endRow}
	</select>
	
	<select id="suggestSelect" resultType="spring.web.model.Article">
		select * 
		from suggestBoard
		where no = #{no} 
	</select>
	
	<update id="suggestUpdate">
		update suggestBoard
		set title = #{title}, contents = #{contents}
		where no = #{no}
	</update>
	
	<update id="suggestUpdateCount">
		update suggestBoard
		set hits = #{hits} + 1
		where no = #{no}
	</update>
	
	<update id="suggestDelete">
		update suggestBoard
		set visible = 0
		where no = #{no}
	</update>
	
	<update id="suggestCommentDelete">
		update suggestComments
		set visible = 0
		where no = #{no}
	</update>
	
	<!-- 후기 게시판 관련 쿼리 -->
	
	<insert id="reviewInsert">
		insert into reviewBoard
		(writer, title, contents, grade, image1, image2, image3, uploadDate)
		values(#{writer}, #{title}, #{contents}, #{grade}, #{image1}, #{image2}, #{image3}, sysdate())
	</insert>
	
	<insert id="reviewCommentInsert">
		insert into reviewComments
		(bNo, writer, contents, uploadDate)
		values(#{bNo}, #{writer}, #{contents}, sysdate())
	</insert>
	
	<select id="reviewCountAll" resultType="String">
		select count(*) 
		from reviewBoard
		where visible = 1
	</select>
	
	<select id="reviewCommentCountAll" resultType="String">
		select count(*) 
		from reviewComments
		where visible = 1 and bNo = #{bNo}
	</select>
	
	<select id="reviewSelectAll" resultType="spring.web.model.Article">
		select * 
		from reviewBoard
		where visible = 1 
		order by no desc limit #{startRow},#{endRow}
	</select>
	
	<select id="reviewCommentSelectAll" resultType="spring.web.model.Comment">
		select * 
		from reviewComments
		where visible = 1 and bNo = #{bNo}
		order by no desc limit #{startRow},#{endRow}
	</select>
	
	<select id="reviewSelect" resultType="spring.web.model.Article">
		select * 
		from reviewBoard
		where no = #{no} 
	</select>
	
	<update id="reviewUpdate">
		update reviewBoard
		set title = #{title}, contents = #{contents}, grade = #{grade}
		where no = #{no}
	</update>
	
	<update id="reviewUpdateImage1">
		update reviewBoard
		set image1 = '${image1}'
		where no = #{no}
	</update>
	
	<update id="reviewUpdateImage2">
		update reviewBoard
		set image2 = '${image2}'
		where no = #{no}
	</update>
	
	<update id="reviewUpdateImage3">
		update reviewBoard
		set image3 = '${image3}'
		where no = #{no}
	</update>
	
	<update id="reviewUpdateImage">
		update reviewBoard
		set title = #{title}, contents = #{contents}, grade = #{grade},
		image1 = #{image1}, image2 = #{image2}, image3 = #{image3}
		where no = #{no}
	</update>
	
	<update id="reviewUpdateCount">
		update reviewBoard
		set hits = #{hits} + 1
		where no = #{no}
	</update>
	
	<update id="reviewDelete">
		update reviewBoard
		set visible = 0
		where no = #{no}
	</update>
	
	<update id="reviewCommentDelete">
		update reviewComments
		set visible = 0
		where no = #{no}
	</update>
	
	<update id="reviewRecommendUp">
		update reviewBoard
		set recommend = recommend + 1
		where no = #{no}
	</update>
	
	<update id="reviewRecommendDown">
		update reviewBoard
		set recommend = recommend - 1
		where no = #{no}
	</update>
	
	<insert id="recommendInsert">
		insert into recommend
		values(#{no}, #{id})
	</insert>
	
	<delete id="recommendDelete">
		delete from recommend
		where bNo = #{no} and recommend_id = #{id}
	</delete>
	
	<select id="recommendSelect" resultType="String">
		select count(*) 
		from recommend
		where bNo = #{no} and recommend_id = #{id}
	</select>
	
</mapper>